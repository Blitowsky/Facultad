Ver video antes de la clase del miércoles


que es un algoritmo?

Estructura de datos: forma particular de organizar datos para que sean utilizados en un algoritmos

la mejor estructura de datos: arrayList

Link list, list, spanning tree, tree, graph, stack, hashing

eficiencia, creatividad y pensamiento

usaremos un subset de Python, aunque está capado 



PROMOCIONAL: 100% de los prácticos aprobados en tiempo y forma y aprobar los 2 parciales en la primera instancia
REGULARIDAD: 100% de los prácticos aprobados y aprobar ambos parciales en cualquier instancia 


Lunes: Clase práctica, consultas y práctica en pizarra
Martes: vence entrega práctico
Miercoles: tema nuevo
En casa: videos y realizar TP
Clase: consultas y presentación de TP


Operaciones elementales en arreglos:
Insert(Arreglo,posI,entrada) -> Arreglo[posI] = entrada
Acces(Arr,posI) -> Arr[10]

memoria, conjunto de operaciones

TAD: Tipo Abstracto de Dato / concepto abstraco que no necesariamente está implementado en el lenguaje 
especificación y serie de operaciones elementales

El arreglo es una porción de memoria continua

TAD secuencia -> implementados a partir de un arreglo

-------------------------------COMPLEJIDAD-----------------------------------

Complejidad espacial: cantidad de memoria que demanda un programa
Complejidad temporal: cantidad de tiempo que demanda el programa

Quitando los detalles como arquitectura o lenguaje, las complejidades serán semejantes.
Esto dice el principio de invarianza:
La diferencia entre dos posibles implementaciones va a ser a lo sumo, un escalar




Operaciones elementales:(Cuentan como 1 OE)
    -Operaciones aritméticas básicas
    -Asignaciones a variables de tipo predefinido por el compilador
    -Saltos(llamadas a funciones)
    -Comparaciones lógicas
    -Acceso a estructuras indexadas básicas(vectores y matrices)

T(c) -> Tiempo de evaluación del condicional
T(s) -> Tiempo de ejecución del código dentro de la estructura
T(Pn) -> Tiempo de evalación de un parámetro



Condicional if:

---------------
if c:
    s1
else:
    s2
---------------
 
   T= T(c) + max{T(s1), T(s2)}

Función:

---------------
F(P1,P2,...,Pn)
---------------
    T= 1(salto) + T(P1)+T(P2)+...+T(Pn) + T(F)

    T(F)= T(Op) + T(R)
    
T(Op) -> Tiempo de las operaciones realizadas dentro de la función
T(R) -> Tiempo de evaluar el retorno (salto) + su valor : 2OE

Bucle while:

---------------
while c:
    s
---------------
    T= T(c) + (n°iteraciones) * (T(s) + T(c))

Bucle for:

    Se calcula expresándolo como un bucle while



-------------------------------COMPLEJIDAD TEORICA-----------------------------------

la c de la función de invarianza determina la función usada como cota superior

la idea es poner el techo lo mas cerca posible para acotar al mínimo la diferencia o reducir al mínimo el escalar c

la notación refiere al peor de los casos posibles

la funcion constante se relaciona a operaciones basicas

la cuadrática a iteraciones anidadas

mientras mas bucles el exponente de n aumenta

el orden de complejidad logarítmico está asociada a funciones recursivas

los crecimientos exponenciales y factoriales se aplican cuando en cada operación se duplica o multiplica la cantidad de operaciones siguientes



-------------------------------PILAS Y CONTADOR-----------------------------------

hay tipos de datos de tipo apuntador, este dato almacena una posición de memoria donde se almacenó lo que quicimos guardar, no un dato específico

funciones de las pilas (LIFO):
push() coloca un elemento al comienzo de la lista, es totalmente equivalente a la funcióń add()

pop() elimina el primer elemento de la lista, aka devincula el primer elemento y devuelve su valor

enque() agrega un elemento a la lista, lo encola, probablemente al inicio. no hay diferencia con el push() por lo tanto es idéntico al add()

deque() recorre toda la lista y desvincula el último nodo (colas comunes y corrientes) y devolver el valor del mismo

COLA POR PRIORIDAD: no es un fifo, es aquel que tenga lo que nosotros definamos como mayor prioridad

value: 
nextNode: 
priority: 


-------------------------------     ARBOLES     ----------------------------------

Los árboles poseen nodos con jerarquía, SON estructuras jerárquicas 
estructura dinámica y no lineal, como por ejemplo, las linked lists
es no lineal porque a un nodo pueden sucederle varios nodos

Un ejemplo puede ser una estructura de mando en algúna organización 

Tipos de nodo en un árbol: 
        -Raiz, rama y hoja
        -Altura y niveles: por cada nueva generación auenta un nivel. Ej: raiz = 1, ramas= 2 | n-1, Hojas= n
        -Grados: cantidad máxima permitida de salidas por nodo
        -Peso: suma directa de la cantidad de nodos en el árbol


TIPOS DE ÁRBOLES:

    NOSOTROS: vamos a trabajar con árboles binarios, es decir, de grado máximo 2 

    árbol binario balanceado: los subárboles poseen la misma altura

    árbol binario no balanceado: Los subárboles NO poseen la misma altura

    árbol completo: ambos árboles tienen la misma latura y ambos subárboles poseen la misma cantidad de hijos

    -Árbol binario de búsqueda:
        los nodos de la izquierda son menores al padre
        los nodos de la derecha son mayores al padre

OPERACIONES CON ÁRBOLES:
    + Recorrido Pre Orden: Arranca por la raiz y va completando los caminos hacia cierto lado, como el método para resolver laberintos :)
    + Recorrido In Orden: Empieza por el final lateral del primer subárbol (si existe)
    + Recorrido en Amplitud: Recorre por niveles hasta agotarlo y baja al siguiente| Arranca en la raíz y termina en el nivel inferior
    + Recorrido Post Orden: recorre en post orden cada uno de los subárboles y deja la raíz para el final


Operación para construir e insertar en un árbol binario

    si deseo eliminar un nodo con un hijo, debo revincular el hijo al padre del nodo en cuestión y luego eliminarlo
    


RECURSIVIDAD

una funcion que se llama a sí misma

caso/s bases o caso/s triviales y luego un caso general 

factorial y fibonacci

recursividad directa: un módulo que se llama a sí mismo
recursividad indirecta: 


el peor caso de un arbol binario de búsqueda no es O(log n), es O(n)

en promedio, si es de O(log n) si el árbol es balanceado se cumplirá, pero para casos en los que quede un árbol con una sola linea de sucesores
no será de O(log n), será O(n)





funciones recursivas:
si el parámetro que tengo que evaluar es el mismo que retorna la función, debo asignárselo a una variable auxiliar y luego evaluarlo 






